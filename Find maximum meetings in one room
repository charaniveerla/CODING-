 Q.
 There is one meeting room in a firm. There are N meetings in the form of (S[i], F[i]) where S[i] is the start time of meeting i and F[i] is finish time of meeting i. The task is to find the maximum number of meetings that can be accommodated in the meeting room. Print all meeting numbers 
Input:
Input: s[] = {1, 3, 0, 5, 8, 5}, f[] = {2, 4, 6, 7, 9, 9}
Output: 
1 2 4 5
First meeting [1, 2]
Second meeting [3, 4]
Fourth meeting [5, 7]
Fivth meeting [8, 9]
Input:
Input: s[]={75250, 50074, 43659, 8931, 11273, 27545, 50879, 77924},
f[] = {112960, 114515, 81825, 93424, 54316, 35533, 73383, 160252 }
Output:  6 7 1
1 2 4 5


#PYTHON

class meeting:
    def __init__(self, start, end, pos):
        self.start = start
        self.end = end
        self.pos = pos
def maxMeeting(l, n):   
    ans = []
    l.sort(key = lambda x: x.end)
    ans.append(l[0].pos)
    time_limit = l[0].end
    for i in range(1, n):
        if l[i].start > time_limit:
            ans.append(l[i].pos)
            time_limit = l[i].end
    for i in ans:
        print(i + 1, end =" ")
        print()
        
if __name__ == '__main__':
    s = [ 1, 3, 0, 5, 8, 5 ]
    f = [ 2, 4, 6, 7, 9, 9 ]
    n = len(s)
    l = []
    for i in range(n):
        l.append(meeting(s[i], f[i], i))
    maxMeeting(l, n)
 

OUTPUT: 2
4
5
