
Q.
m Coloring Problem  
Given an undirected graph and a number m, determine if the graph can be colored with at most m colors  such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph  means the assignment of colors to all vertices. 
Input: 
1) A 2D array graph [V][V] where V is the number of vertices in graph and graph [V][V] is adjacency  matrix representation of the graph. A value graph [i][j] is 1 if there is a direct edge from i to j, otherwise  graph[i][j] is 0. 
2) An integer m which is the maximum number of colors that can be used. 
Output: 
An array color [V] that should have numbers from 1 to m. color[i] should represent the color assigned to  the i th vertex. The code should also return false if the graph cannot be colored with m colors. 



#PYTHON


def isSafe(graph, color):
	for i in range(4):
		for j in range(i + 1, 4):
			if (graph[i][j] and color[j] == color[i]):
				return False
	return True
def graphColoring(graph, m, i, color):
	if (i == 4):
		if (isSafe(graph, color)):
			printSolution(color)
			return True
		return False
	for j in range(1, m + 1):
		color[i] = j
		if (graphColoring(graph, m, i + 1, color)):
			return True
		color[i] = 0
	return False
def printSolution(color):
	print("Solution Exists:" " Following are the assigned colors ")
	for i in range(4):
		print(color[i],end=" ")
if __name__ == '__main__':
	graph = [
		[ 0, 1, 1, 1 ],
		[ 1, 0, 1, 0 ],
		[ 1, 1, 0, 1 ],
		[ 1, 0, 1, 0 ],
	]
	m = 3
	color = [0 for i in range(4)]

	if (not graphColoring(graph, m, 0, color)):
		print ("Solution does not exist")

        
    CASE: TO PRINT SOLUTION EXIST  
    OUTPUT:(if M value is more thn 3 it prints) Solution Exists:  1 2 3 2 
    
    CASE: TO PRINT SOLUTION not EXIST  
    OUTPUT: Solution does not exit    
