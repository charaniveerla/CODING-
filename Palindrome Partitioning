Q.
Pre-Lab Task:
1. Palindrome Partitioning
Given a string, a partitioning of the string is a palindrome partitioning if every substring of the partition 
is a palindrome. For example, “aba|b|bbabb|a|b|aba” is a palindrome partitioning of “ababbbabbababa”. 
Determine the fewest cuts needed for palindrome partitioning of a given string. 
For example, minimum 3 cuts are needed for “ababbbabbababa”. The three cuts are “a|babbbab|b|ababa”. 
If a string is palindrome, then minimum 0 cuts are needed. 
If a string of length n containing all different characters, then minimum n-1 cuts are needed.


#PYTHON 3

def isPalindrome(x):
    return x == x[::-1]
def minPalPartion(string, i, j):
    if i >= j or isPalindrome(string[i:j + 1]):
        return 0
    ans = float('inf')
    for k in range(i, j):
        count = (
            1 + minPalPartion(string, i, k)
            + minPalPartion(string, k + 1, j)
        )
        ans = min(ans, count)
    return ans
def pfunc():
    string = input("enter string:")
    print(
     "Min cuts needed for Palindrome Partitioning is ",
     minPalPartion(string, 0, len(string) - 1),
    )
pfunc()

enter string:ababbbabbababa                                                                                                                   
Min cuts needed for Palindrome Partitioning is 3
