

Q.
There are n items with some weights and corresponding values and a bag of capacity W.  The items should be placed in the bag in such a way that the total value is maximum and  total weight should be less than knapsack capacity. In this problem 0- 1 means that we canâ€™t  put the items in fraction. Either put the complete item or ignore it. find the solution for this  problem in C using dynamic programming. 
https://www.hackerearth.com/practice/notes/knapsack-algorithm-problem-solvedusing dynamic-programming/ 
Sample Input: 
Enter number of items: 3 
Enter value and weight of items: 
1 4 5 
2 5 6 
3 4 0 
Enter size of knapsack: 40 
Sample Output: 
 3 




#c

#include <stdio.h>
int max(int a, int b) { 
    return (a > b)? a : b;
    }
// Returns the maximum value that can be put in a knapsack of capacity W
int knapsack(int W, int wt[], int val[], int n)
{
int i, w;
int K[n+1][W+1];
// Build table K[][] in bottom up manner
for (i = 0; i <= n; i++)
{
for (w = 0; w <= W; w++)
{
if (i==0 || w==0)
K[i][w] = 0;
else if (wt[i-1] <= w)
K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]);
else
K[i][w] = K[i-1][w];
}
}
return K[n][W];
}
int main()
{
int val[] = {60, 100, 120};
int wt[] = {10, 20, 30};
int W = 50;
int n = sizeof(val)/sizeof(val[0]);
printf("\nValue = %d", knapsack(W, wt, val, n));
return 0;
}


output: 
value: 220
