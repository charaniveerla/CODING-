Q.
Nanda decides to go to a tour. So he himself prepared a map and he started from the city where he lives in, determine the lengths of the shortest paths from the starting city to all other cities in the map. If a city is unreachable, its distance is -1. Cities will be numbered consecutively as from and to, and edges will have varying distances or lengths.
 Sample-Input: 
Enter no. of cities:5  
Enter the cost matrix:
 0 3 4 0 0
 3 0 5 6 2
 4 5 0 0 0 
0 6 0 0 0
 0 2 0 0 0
 Enter the starting city:3
 Sample-Output: 
Distance of node0=9 
Path=0<-1<-3 
Distance of node1=6 
Path=1<-3 
Distance of node2=11 
Path=2<-1<-3 
Distance of node4=8 
Path=4<-1<-3  


#PTYHON 3

def findMinCost(cost):
 # `lookup[i]` stores the minimum cost to reach city `i` from city 0
 lookup = [None] * N
 # Initialize `lookup[]` with the direct ticket price from the source city
 for i in range(N):
  lookup[i] = cost[0][i]
  # repeat loop till `lookup[]` is filled with all minimum values
  isFilled = False
  while not isFilled:
   isFilled = True
   # fill `lookup[]` in a bottom-up manner
   for i in range(N):
    for j in range(N):
     if lookup[i] > lookup[j] + cost[j][i]:
      lookup[i] = lookup[j] + cost[j][i]
      isFilled = False
     # return the minimum cost to reach city `N-1` from city 0
 return lookup[N - 1]

if __name__ == '__main__':
 cost = [
 [0, 25, 20, 10, 105],
 [20, 0, 15, 80, 80],
 [30, 15, 0, 70, 90],
 [10, 10, 50, 0, 100],
 [40, 50, 5, 10, 0]
 ]
 N = len(cost)
 print("The minimum cost is ", findMinCost(cost))


Output :
Vertex Distance from Source
0 0
1 4
2 12
3 19
4 21
5 11
6 9
7 8
8 14
